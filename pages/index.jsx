import Head from "next/head";
import { collection, onSnapshot, orderBy, query } from "firebase/firestore";
import Link from "next/link";
import { useContext, useEffect, useState } from "react";
import { useAuthState } from "react-firebase-hooks/auth";
import Message from "../components/Message";
import { auth, db } from "../utils/firebase";
import AppContext from "../components/Context";

export default function Home() {
  const [allPosts, setAllPosts] = useState([]);
  const [user, loading] = useAuthState(auth);
  const themeContext = useContext(AppContext);
  const isJapanese = themeContext.isJapanese;

  const getPosts = async () => {
    const collectionRef = collection(db, "posts");
    const q = query(collectionRef, orderBy("timestamp", "desc"));
    const unsubscribe = onSnapshot(q, (snapshot) => {
      setAllPosts(snapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
    });
    return unsubscribe;
  };

  useEffect(() => {
    getPosts();
  }, []);

  if (loading)
    return (
      <div className="flex flex-col justify-center text-center min-h-screen fixed top-0 left-0 -z-10 w-full">
        <h2 className="text-gray-600 text-3xl font-light mx-6">
          {isJapanese ? "読み込み中" : "Loading..."}
        </h2>
      </div>
    );

  return (
    <div>
      <Head>
        <title>MindBoard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col text-gray-600 dark:dark:text-slate-300">
        {!user ? (
          <div className="grid gap-5 sm:gap-20 grid-cols-1 grid-rows-3 sm:grid-cols-2 sm:grid-rows-2 sm:mt-20 text-center font-light">
            <div className="bg-white dark:bg-slate-800 flex flex-col justify-between sm:col-span-2 border border-gray-400 dark:border-gray-600 shadow-lg rounded-lg p-5">
              <h2 className="text-3xl pb-3 font-medium text-transparent bg-clip-text bg-gradient-to-br from-gray-700 to-gray-400 dark:from-slate-300 dark:to-slate-600">
                {isJapanese ? "考えを共有しよう" : "Share Your Thoughts"}
              </h2>
              <p className="dark:text-slate-300">
                {isJapanese
                  ? "誰でも見えるメッセージを送信する。"
                  : "Post messages anyone can see."}
              </p>
            </div>
            <div className="bg-white dark:bg-slate-800 flex flex-col justify-between border border-gray-400 dark:border-gray-600 shadow-lg rounded-lg p-5">
              <h3 className="text-2xl pb-3 font-medium text-transparent bg-clip-text bg-gradient-to-br from-gray-700 to-gray-400 dark:from-slate-300 dark:to-slate-600">
                {isJapanese ? "読めるもコメントもできる" : "Read And Comment"}
              </h3>
              <p className="dark:text-slate-300">
                {isJapanese
                  ? "好きなメッセジーにコメントする"
                  : "Comment posts you like."}
              </p>
            </div>
            <div className="bg-white dark:bg-slate-800 flex flex-col justify-between border border-gray-400 dark:border-gray-600 shadow-lg rounded-lg p-5">
              <h3 className="text-2xl pb-3 font-medium text-transparent bg-clip-text bg-gradient-to-br from-gray-700 to-gray-400 dark:from-slate-300 dark:to-slate-600">
                {isJapanese ? "編集も消去も" : "Edit And Delete"}
              </h3>
              <p className="dark:text-slate-300">
                {isJapanese
                  ? "ダッシュボードを使用して、メッセージを編集および削除する。"
                  : "Use Dashboard to edit and delete your messages."}
              </p>
            </div>
          </div>
        ) : (
          !allPosts.length && (
            <div className="flex flex-col justify-center my-20">
              <h2 className="text-3xl text-center font-light mx-6">
                {isJapanese ? "メッセージがありません" : " No Posts Yet..."}
              </h2>
            </div>
          )
        )}
        {user && allPosts.length > 0 && (
          <h1 className="pb-5 text-lg text-center sm:text-left">
            {isJapanese ? "最新のメッセージ" : "Latest Posts"}
          </h1>
        )}
        {allPosts.map((post) => (
          <Message key={post.id} {...post}>
            <hr className="border-gray-400 dark:border-gray-600" />
            <Link href={{ pathname: `/${post.id}`, query: { ...post } }}>
              <button className="mt-4 text-sm font-bold">
                {post.comments?.length > 0 ? post.comments?.length : 0}{" "}
                {isJapanese
                  ? "コメント"
                  : post.comments?.length === 1
                  ? "comment"
                  : "comments"}
              </button>
            </Link>
          </Message>
        ))}
      </div>
    </div>
  );
}
